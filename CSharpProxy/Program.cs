using System;

namespace CSharpProxy
{
    /// <summary>
    /// 代理模式：为其他对象提供一种代理以控制对这个对象的访问
    /// 远程（Remote）代理：为一个位于不同的地址空间的对象提供一个局域代表对象。这个不同的地址空间可以是本电脑中，也可以在另一台电脑中。最典型的例子就是——客户端调用Web服务或WCF服务。
    ///虚拟（Virtual）代理：根据需要创建一个资源消耗较大的对象，使得对象只在需要时才会被真正创建。
    ///Copy-on-Write代理：虚拟代理的一种，把复制（或者叫克隆）拖延到只有在客户端需要时，才真正采取行动。
    ///保护（Protect or Access）代理：控制一个对象的访问，可以给不同的用户提供不同级别的使用权限。
    ///防火墙（Firewall）代理：保护目标不让恶意用户接近。
    ///智能引用（Smart Reference）代理：当一个对象被引用时，提供一些额外的操作，比如将对此对象调用的次数记录下来等。
    ///Cache代理：为某一个目标操作的结果提供临时的存储空间，以便多个客户端可以这些结果。
    ///举例：朋友出国，自己托朋友去国外买东西，则朋友充当代理
    ///抽象主题角色：声明了真实主题和代理主题的公共接口，这样一来在使用真实主题的任何地方都可以使用代理主题
    ///代理主题角色：代理主题角色内部含有对真是主题的引用，从而可以操作真实主题对象；但是代理角色有自己需要办的东西，所以要执行一些其他的操作
    ///真实主题角色：定义了代理角色代表的真实对象
    /// </summary>
    class Program
    {
        static void Main(string[] args)
        {
            Person proxy = new Friend();
            proxy.BuyProduct();
        }
    }
}
